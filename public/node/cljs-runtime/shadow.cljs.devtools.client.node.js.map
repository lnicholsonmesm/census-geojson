{"version":3,"sources":["shadow/cljs/devtools/client/node.cljs"],"sourcesContent":["(ns shadow.cljs.devtools.client.node\n  (:require [shadow.cljs.devtools.client.env :as env]\n            [\"ws\" :as ws]\n            [cljs.reader :as reader]\n            [goog.object :as gobj]))\n\n(defonce client-id (random-uuid))\n\n(defonce ws-ref (volatile! nil))\n\n(defn ws-close []\n  (when-some [tcp @ws-ref]\n    (.close tcp)\n    (vreset! ws-ref nil)))\n\n(defn ws-msg [msg]\n  (when-some [ws @ws-ref]\n    (.send ws (pr-str msg)\n      (fn [err]\n        (when err\n          (js/console.error \"REPL msg send failed\" err))))\n    ))\n\n(defn node-eval [{:keys [js source-map-json] :as msg}]\n  (let [result (js/SHADOW_NODE_EVAL js source-map-json)]\n    result))\n\n(defn is-loaded? [src]\n  (true? (gobj/get js/SHADOW_IMPORTED src)))\n\n(defn closure-import [src]\n  {:pre [(string? src)]}\n  (js/SHADOW_IMPORT src))\n\n(defn repl-init\n  [{:keys [id repl-state] :as msg}]\n  (let [{:keys [repl-sources]} repl-state]\n\n    (doseq [{:keys [output-name] :as src} repl-sources\n            :when (not (is-loaded? output-name))]\n      (closure-import output-name))\n\n    (ws-msg {:type :repl/init-complete :id id})\n    ))\n\n(defn repl-invoke [{:keys [id] :as msg}]\n  (let [result\n        (-> (env/repl-call #(node-eval msg) env/repl-error)\n            (assoc :id id))]\n\n    (ws-msg result)))\n\n(defn repl-set-ns [{:keys [id] :as msg}]\n  ;; nothing for the client to do really\n  (ws-msg {:type :repl/set-ns-complete :id id}))\n\n(defn repl-require\n  [{:keys [id sources reload-namespaces] :as msg}]\n  (try\n    (doseq [{:keys [provides output-name] :as src} sources]\n      (when (or (not (is-loaded? output-name))\n                (some reload-namespaces provides))\n        (closure-import output-name)))\n    (ws-msg {:type :repl/require-complete :id id})\n\n    (catch :default e\n      (js/console.error \"repl/require failed\" e)\n      (ws-msg {:type :repl/require-error :id id})\n      )))\n\n(defn build-complete\n  [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (when (and env/autoload\n               (or (empty? warnings) env/ignore-warnings))\n      \n      (let [{:keys [sources compiled]}\n            info\n\n            files-to-require\n            (->> sources\n                 (remove (fn [{:keys [ns]}]\n                           (contains? (:never-load reload-info) ns)))\n                 (filter (fn [{:keys [ns resource-id]}]\n                           (or (contains? compiled resource-id)\n                               (contains? (:always-load reload-info) ns))))\n                 (map :output-name)\n                 (into []))]\n\n        (when (seq files-to-require)\n          (env/do-js-reload\n            msg\n            #(doseq [src files-to-require]\n               (env/before-load-src src)\n               (closure-import src))\n            ))))))\n\n(defn process-message\n  [{:keys [type] :as msg}]\n  ;; (js/console.log \"repl-msg\" msg)\n  (case type\n    :repl/init\n    (repl-init msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :build-configure\n    :ignored\n\n    :build-start\n    :ignored\n\n    :build-complete\n    (build-complete msg)\n\n    :build-failure\n    :ignored\n\n    :worker-shutdown\n    (.terminate @ws-ref)\n\n    ;; default\n    (prn [:repl-unknown msg])\n    ))\n\n(defn ws-connect []\n  (let [url\n        (env/ws-url :node)\n\n        client\n        (ws. url [])]\n\n    (.on client \"open\"\n      (fn []\n        (vreset! ws-ref client)))\n\n    (.on client \"unexpected-response\"\n      (fn [req ^js res]\n        (let [status (.-statusCode res)]\n          (if (= 406 status)\n            (js/console.log \"REPL connection rejected, probably stale JS connecting to new server.\")\n            (js/console.log \"REPL unexpected error\" (.-statusCode res))\n            ))))\n\n    (.on client \"message\"\n      (fn [data flags]\n        (try\n          (env/process-ws-msg data process-message)\n          (catch :default e\n            (js/console.error \"failed to process message\" data e)))))\n\n    (.on client \"close\"\n      (fn []\n        (js/console.log \"REPL client disconnected\")\n        ))\n\n    (.on client \"error\"\n      (fn [err]\n        (js/console.log \"REPL client error\" err)))\n    ))\n\n(when env/enabled\n  (ws-close) ;; if this is reloaded, reconnect the socket\n  (ws-connect))\n\n"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.node","js/shadow.cljs.devtools.client.node.client-id","shadow.cljs.devtools.client.node/client-id","cljs.core/random-uuid","js/shadow.cljs.devtools.client.node.ws-ref","shadow.cljs.devtools.client.node/ws-ref","cljs.core/volatile!","shadow.cljs.devtools.client.node/ws-close","cljs.core/deref","temp__5461__auto__","tcp","cljs.core/vreset!","shadow.cljs.devtools.client.node/ws-msg","ws","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","msg","err","js/console.error","p__14764","map__14765","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.node/node-eval","js/SHADOW_NODE_EVAL","js","source-map-json","result","shadow.cljs.devtools.client.node/is-loaded?","goog.object/get","js/SHADOW_IMPORTED","src","js/Error","shadow.cljs.devtools.client.node/closure-import","js/SHADOW_IMPORT","p__14780","map__14781","shadow.cljs.devtools.client.node/repl-init","map__14783","repl-state","cljs.core/seq","i__14789","count__14788","chunk__14787","map__14791","seq__14785","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","map__14793","cljs.core/next","repl-sources","output-name","id","p__14795","map__14796","shadow.cljs.devtools.client.node/repl-invoke","shadow.cljs.devtools.client.env/repl-call","shadow.cljs.devtools.client.env/repl-error","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__14799","map__14800","shadow.cljs.devtools.client.node/repl-set-ns","p__14802","map__14803","shadow.cljs.devtools.client.node/repl-require","e14805","i__14809","count__14808","chunk__14807","map__14810","seq__14806","map__14812","sources","or__4047__auto__","cljs.core/some","reload-namespaces","provides","e","p__14814","map__14815","shadow.cljs.devtools.client.node/build-complete","map__14817","info","cljs.core/LazySeq","s__14820","xs__6012__auto__","map__14825","s__14822","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__14823","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","b__14824","cljs.core/chunk-cons","cljs.core/chunk","iter__14821","cljs.core/cons","cljs.core/rest","iterys__4430__auto__","fs__4431__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__14819","iter__4434__auto__","cljs.core/not","warnings","warning","resource-name","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/autoload","cljs.core/empty?","shadow.cljs.devtools.client.env/ignore-warnings","map__14827","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__14832","map__14833","cljs.core/contains?","reload-info","ns","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__14829","map__14830","compiled","resource-id","cljs.core.map.cljs$core$IFn$_invoke$arity$2","files-to-require","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$2","i__14838","count__14837","chunk__14836","seq__14835","shadow.cljs.devtools.client.env/before-load-src","p__14840","map__14841","shadow.cljs.devtools.client.node/process-message","G__14843","cljs.core/Keyword","type","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","shadow.cljs.devtools.client.node/ws-connect","shadow.cljs.devtools.client.env/ws-url","js/shadow.js.shim.module$ws","url","client","res","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","status","js/console.log","e14929","shadow.cljs.devtools.client.env/process-ws-msg","data","shadow.cljs.devtools.client.env/enabled"]}